using UnityEngine;

public class EnemySkeleton : EnemyBase
{
    private EnemySkeletonMovement movement;
    private EnemySkeletonCombat combat;
    private EnemySkeletonAnimator animator;
    private EnemyBase enemyBase;
    private Transform playerTransform;
    
    private void Start()
    {
        movement = GetComponent<EnemySkeletonMovement>();
        combat = GetComponent<EnemySkeletonCombat>();
        animator = GetComponent<EnemySkeletonAnimator>();
        enemyBase = GetComponent<EnemyBase>();
        
        GameObject playerObj = GameObject.FindGameObjectWithTag("Player");
        if (playerObj != null)
        {
            playerTransform = playerObj.transform;
        }
        else
        {
            Debug.LogError("No GameObject with tag 'Player' was found!");
        }

        if (movement == null)
        {
            Debug.LogError("EnemySkeletonMovement script is missing!");
        }

        if (combat == null)
        {
            Debug.LogError("EnemySkeletonCombat script is missing!");
        }

        if (animator == null)
        {
            Debug.LogError("EnemySkeletonAnimator script is missing!");
        }

        if (enemyBase == null)
        {
            Debug.LogError("EnemyBase script is missing!");
        }

        enemyBase.ChangeState(EnemyState.Patrolling);
    }

    private void Update()
    {
        switch (currentState)
        {
            case EnemyState.Idle:
                animator.PlayIdleAnimation();
                break;
            case EnemyState.Patrolling:
                movement.PatrolArea();
                break;
            case EnemyState.Chasing:
                movement.ChasePlayer();
                break;
            case EnemyState.Attacking:
                //combat.PerformMeleeAttack();
                break;
            case EnemyState.Stunned:
                // Stun effect logic here
                break;
            case EnemyState.Dead:
                // Handle death logic here
                break;
        }

        movement.UpdateLastDirection(transform.position);
        HandleStateChange();
    }

    public override void TakeDamage(int damage)
    {
        base.TakeDamage(damage);
        Debug.Log("Skeleton took damage.");
    }

    protected override void Die()
    {
        Debug.Log("Skeleton shatters into bones!");
        base.Die();
    }

    public void HandleStateChange()
    {
        float distanceToPlayer = Vector2.Distance(transform.position, playerTransform.position);
        
        if (currentState == EnemyState.Patrolling)
        {
            if (distanceToPlayer < movement.detectionRadius && !combat.IsCurrentlyAttacking())
            {
                enemyBase.ChangeState(EnemyState.Chasing);
            }
        }

        if (currentState == EnemyState.Chasing)
        {
            if (distanceToPlayer < combat.meleeRange)
            {
                enemyBase.ChangeState(EnemyState.Attacking);
            }
        }

        if (currentState == EnemyState.Attacking && combat.IsCurrentlyAttacking()) return;

        if (currentState == EnemyState.Attacking && distanceToPlayer > combat.meleeRange && !combat.IsCurrentlyAttacking())
        {
            if (combat.canAttack)
            {
                enemyBase.ChangeState(EnemyState.Chasing);
            }
        }
    }
}
